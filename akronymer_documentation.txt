aKronyMer readme. 

v1.00a

usage: aKronyMer inseqs.lin.fna output [K] [Q queries.lin.fna [MIN2]] [HEUR[0-9]] [ANI] [CHANCE] [GC] [ADJ] [GLOBAL/DIRECT/LOCAL] [TREE/SETCLUSTER] [RC] [NOCUT]
 

Options are positional (that is, they are parsed in the exact order in which they are specified above):

OMP_NUM_THREADS: (this is not part of the command itself but occurs before the command, e.g. with 16 threads): OMP_NUM_THREADS=16 akmer100a ...

inseqs.lin.fna: The input file. This is a FASTA formatted file that is "linearized" -- meaning, one line for the header, the next line for the sequence, and this pattern repeats. It will not work with FASTA files with the sequence spread out over multiple lines (the so-called "wrapped" FASTA). It has to be alternating lines of header and sequence, one after the other. It only supports DNA currently. It can be extended to protein if there is demand. The length limit on the lines is 2GB (after this, aKronyMer's performance falls off -- but can be extended to 4GB to compare human genomes). Suggestions for what to put into this fasta: marker genes (whole 16S databases), short reads (a 16S sampling project from Illumina), whole genomes, whole metagenomic samples (amplicon OR shallow shotgun, etc).

output: The output file. This will either be a distance matrix in tab-delimited lower-left triangle format, or Newick formatted tree. The format depends on user specification of the "TREE" positional argument; if TREE is not specified it is the former, otherwise the latter. 

K: optional. If desired, this controls the length of the k-mers that are considered. Shorter k-mers allow more distant comparisons, longer ones provide more specificity. If not specified, the program attempts to auto-select a K based on the distribution of sequence lengths within the input. In general, the longer the sequences provided, the longer you will have to make K to achieve meaningful results, as the more data you are comparing, the more specific you will have to be (the k-mer space of shorter k-mers becomes saturated). If comparing shorter sequences, there is no such restriction and long and short k-mers may be used. 

[Q queries.lin.fna [MIN2]]: optional (MIN2 itself being optional within this optional setting). Specifying the letter "Q" following by a linearized fasta of query sequences converts aKronyMer to a query-vs-reference alignment paradigm. This mode is incompatible with TREE and SETCLUSTER. Instead, by default it will report all distances from the queries in "queries.lin.fna" to the references in "inseqs.lin.fna", unless MIN2 is specified after the query file, in which case only the top 2 hits by minimum distance will be returned. This mode is compatible with all normal distance-modifying options. 

HEUR[0-9]: optional. Whether to use heuristics, and if so, optionally the strength of the heuristic (1 by default). HEUR0 is equivalent to omitting the parameter. Heuristics may speed up calculations using very large datasets (> 100,000 input sequences). However, there is a tradeoff between speed and accuracy, with larger numbers denoting faster speed but lower accuracy. Generally, HEUR4 is reasonable on large amplicon datasets. HEUR9 may be valid on genomic datasets. The type of heuristic used is to sample smaller portions of the original sequences to compare. 

ANI: optional. Use a distance metric formulation that is compatible with "average nucleotide identity". This attempts to simulate what you'd get aligning one sequence against another using a conventional aligner. Some caveats: slightly less accurate for shorter sequences (< 1000nt)

CHANCE: optional. Works in tandem with ANI to probabilistically correct the ANI depending on k-mer size, k-mer space saturation, and expected distance given random sequences. It is highly recommended, but only works in tandem with ANI. 

GC: optional. Genome complexity adjustment. This mode uses machine learning inference to take into account base composition of the sequences when performing distance adjustments in "CHANCE". In general this leads to more accurate determination of baseline alignment probability which in turn should yeild more accurate distances.

ADJ: optional. Perform Jukes-Cantor or GTR-like phylogenetic site substitution rate correction of pseudo-alignments to produce phylogenetic distance instead of metric distance (0-1). This is recommended when running on genes or genomes, but may also be useful when computing distances between samples if the tree is used. Not recommended when ANI and CHANCE are used together, as the latter generally accounts for the necessary adjustments for ANI distances. 

GLOBAL/DIRECT/LOCAL: optional. The type of distance to compute. The default, when unspecified, is to compute "local" distances between sequences unless ANI distance matrices are used, in which case the default is global. Local mode allows short sequences to achieve low distances to much longer sequences, provided a good alignment. GLOBAL uses a global distance, which penalizes distance relative to the longer sequence. It is useful when penalizing deletions is of critical importance. DIRECT is the most advanced distance for trees; it is a probabilistic distance accounting for the proportion of the joint k-mer space occupied by a pair of sequences, and penalized by the increase in entropy of the resulting pseudoalignment. We have found ADJ DIRECT distance is most accurate in general, accounting for difference in sequence length as well as probability of chance k-mer alignments. Most useful in tandem with ADJ. 

TREE: optional. If specified, output file will be a Newick-formatted tree. If omitted, default output file will be a lower-left-triangular distance matrix, readable by R: as.dist(read.delim('output',row=1))

SETCLUSTER: optional. If specified, output file will be a list of representative genomes, in order of most relevant new genetic content by K-mers added (greedy), until 0.001 information gain is acheived (or NOCUT is used, below). Importantly, the list also includes a running total of total k-mer space that has been taken up by the joint representation of sequences added, and also provides a probabilistic adjustment (similar to ANI CHANCE LOCAL) of how unique the added sequence is relative to everything added to that point, in terms of local ANI. 

RC: optional. If specified, aKronyMer considers the reverse complements of all k-mers and compares against both orientations of all other k-mers. This is very useful when consdering genomes with contigs that are not uniformly oriented, or when comparing raw metagenomes or genes/genomes with genes and mobile elements that may have been subject to reorientation during evolution (ITS, phage, etc). 

NOCUT: optional. If SETCLUSTER is specified, do not stop clustering at 0.001 raw proportion of unique K-mers added by next sequence. Stop only when no new k-mer content is provided by any other sequences.

Examples:
- First, you need to get your sequences in the right format:
lingenome myFolderOfFastaGenomes AllGenomes.fasta HEADFIX FILENAME

- Creating a tree for genomes:
akmer100a AllGenomes.fasta AllGenomes.tre 13 ADJ DIRECT TREE RC
# Replace the "13" with:
  * "10" for phage
  * "14" for a folder of raw (R1) shallow metagenome samples converted to linearized fasta format (joining with N's is recommended, and aKronyMer is not confused by this)
  * Omit this parameter to have the program auto-detect (but this can confound results between runs if it decides differently as you get more sequences)
  * "7" for amplicons (16S, ITS, etc), and omit "RC"

- Creating a distance matrix:
# Same as creating a tree, but omit "TREE" and change your extension to ".dm"
# But for ANI distance matrices [recommended for interpretability], use the following:
akmer100a AllGenomes.fasta AllGenomes.dm 13 ANI CHANCE GC RC
  * For [g]local distance matrix, add "LOCAL" before "RC"

- Creating a tree/DM for huge amplicon datasets (millions of reads):
# As above, but add HEUR4 right after your choice of K (which should be about 5 in this case) 

- Creating a saturation clustering for a clade of bacterial genomes:
akmer100a AllGenomes.fasta AllGenomes.sc 14 RC SETCLUSTER NOCUT
  * For clustering phage, swap "14" for "13" 
  * Swap K for "12" if you're restricting the input sequences by major phage clade
  
- Searching query sequences against reference sequences, returning distances from each query to all refs
akmer100a ReferenceGenomes.fasta QueryDists.tsv 13 Q Queries.fasta ANI CHANCE GC RC
  * To return just the top 2 hits for each query instead of all hits, insert "MIN2" after Queries.fasta
  * To enable glocal searching of queries/refs of different sizes (e.g. short reads or prophage vs whole genomes), add "LOCAL" before RC

General notes: 
- If the k-mer space becomes saturated (see "Density" or "K_saturation" output line in sequence parse; generally > 0.25 is too high!), there is an inherent limit to similarity detection under these highly-saturated circumstances.
- If the k-mer space is too sparse, you may be losing sensitivity in detecting remote differences. (This is much less of an issue for discriminitive purposes than the saturation case above).
- Try running with the number of non-hyperthreaded cores. In general aKronyMer does not take well to hyperthreading due to implementation limitations. 

Future directions: 
- better documentation (hah!) 
- adjustable weight of phylogenetic distance adjustment if ADJ is used (a sliding scale from 0-1). 
- Differential k-mer weights based on their relative abundance
- Protein/arbitrary sequence support
- Further tuning of distance metric and adjustment to achieve even higher Robinson-Foulds distance to ML trees
- Let SETCLUSTER explicitly cluster by novel adjusted distance as objective function, rather than raw novel k-mers added
- Revamp the commandline structure and parameters (no more positional args)

